#!/bin/bash


# number of arguments to script
NBARGS=2


# ======================= PROCESS NAME =================================
pname=`echo "$0" | sed "s/\.\///g"`
echo "pname = $pname"


mratio0=1.00

# puprad in mm
puprad0=4.3020


function printHELP {
echo "------------------------------------------------------------------------"
echo "$(tput bold) $pname : CREATE MagAO-X PUPIL $(tput sgr0)"
echo "------------------------------------------------------------------------"
echo "  Create MagAO-X pupil"
echo "  Assumes oversizing of all features = $mratio0"
echo "  Native pupil radius                = $puprad0 mm"
echo "  Masked pupil radius                = $puprad / $matio0 mm"
echo "  "
echo "  "
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "     $0 [-hnz] <pixsize> <radpix>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)          help"
echo "     $(tput bold)-n$(tput sgr0)          pre-mask pupil (Native telescope pupil)"
echo "     $(tput bold)-m$(tput sgr0)          Mask pupil (after pupil mask in MagAOX) (default)"
echo "     $(tput bold)-z$(tput sgr0)          Compress output images (gzip)"
echo ""
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "     <pixsize>     array size   [pixel]"
echo "     <radpix>      pupil radius [pixel]"
echo ""
echo " $(tput bold)OUTPUT:$(tput sgr0)"
echo "     pupMagAOX_<pixsize>_<pixrad>.fits            output pupil"
echo "     pupMagAOXM_<pixsize>_<pixrad>.fits           output pupil after actuator masking"
echo "   if -n option: "
echo "     pupMagAOX_native_<pixsize>_<pixrad>.fits     output native telescope pupil"
echo ""
echo " $(tput bold)NOTES:$(tput sgr0)"
echo "    The masked pupils are resized so that their outer radius matches parameter <radpix>"
echo "       -> spiders and central obstruction will be slightly magnified !"
echo "------------------------------------------------------------------------"
}


printHELP1 ()
{
    printf "%20s       Create MagAOX pupil\n" "$0"
}



EXITSTATUS=0

function checkFile {
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] File $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}

function checkDir {
if [ -d $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) found"
   else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Directory $(tput bold)$1$(tput sgr0) not found"
    EXITSTATUS=1
fi
}

function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}


function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
fi

}


# ================= OPTIONS =============================




# Transform long options to short ones
singlelinehelp=0
for arg in "$@"; do
  shift
  case "$arg" in
    "--help") set -- "$@" "-h" ;;
    "--help1")
set -- "$@" "-h"
singlelinehelp=1;
;;
    *)        set -- "$@" "$arg"
  esac
done





COROMASK="1"
COMPRESS="0"
while getopts :hmnz FLAG; do
  case $FLAG in
    n) # native pupil
	COROMASK="0"
    ;;
    m) # masked pupil
	COROMASK="1"
    ;;
    z)
    COMPRESS="1"
    ;;
    h)  #show help
      if [ "$singlelinehelp" -eq "0" ]; then
      printHELP
      else
      printHELP1
      fi
      exit
      ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1))








if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi



# ======================= CHECK REQUIRED FILES =================================
echo ""
#checkFile file1.txt
#checkFile file1.txt


# ============================= CHECK IF COMMAND EXISTS ==========================

checkCommand coffee






if [ $EXITSTATUS -eq 1 ]; then
echo ""
echo "$(tput setaf 1)$(tput bold) REQUIRED FILES, COMMANDS NOT FOUND: EXITING $(tput sgr0)"
echo ""
exit
else
echo ""
fi




# ======================= SCRIPT CODE STARTS HERE =================================




#
# spider offset = 0.1094142259 x puprad
# spider centerline intersects x-axis at +spoffr (two right spiders) and -spoffr (two left spiders)
# Note that setting this parameter to zero would have all spiders originate from center of pupil
#
spoffr=0.1094142259

#
# angle = 103.5 deg / 2 = 0.903208
# This is the angle between x axis and spiders
# spiders are not 90 deg apart. The opening angle between spiders on the right and left sides are 103.5
# The opening angles at the top and bottom are 180-103.5 = 76.5 deg
#
PA=0.7853981634 #??


#
# pre-mask pupil, numbers relative to pupil radius
#

# magnification ratio. It is 1.0 for the native pupil, and is >1.0 when mask is applied
# this magnification adjusts the pupil size back to the <pupradpix> entry when the mask is actually undersizing the pupil
# it is unused (=1.0) unless a mask is applied
mratio=1.0

# central obstruction radius relative to pupil radius
co0=0.3242677824

# spider thickness relative to pupil radius
spthick0=0.04456066946







if [ "$COROMASK" = "1" ]; then
# post-mask pupil, numbers relative to pupil radius
mratio=$mratio0
#co=0.31746 # AFTER magnification by mratio, due to combined effect of 5% oversizing of central obstruction and 5% undersizing of pupil edge
#spthick=0.064626 # AFTER magnification by mratio
fi



size=$1
pupradpix=$2








coffee << EOF
cx=$size/2
cy=$size/2


# scale by mratio
puprad=$puprad0*$mratio
co=$co0*$mratio*$mratio
spthick=$spthick0*$mratio


# scale in pix per mm
scale=$pupradpix/puprad
copix=co*$pupradpix


mkdisk d0 $size $size cx cy $pupradpix
mkdisk d1 $size $size cx cy copix

# spiders
spoffpix=$spoffr*$pupradpix*$mratio
spthickpix=spthick*$pupradpix


x10=cx+spoffpix
y10=cy
x20=x10+$pupradpix*cos($PA)
y20=y10+$pupradpix*sin($PA)

x11=cx-spoffpix
y11=cy
x21=x11-$pupradpix*cos($PA)
y21=y11+$pupradpix*sin($PA)

x12=cx+spoffpix
y12=cy
x22=x12+$pupradpix*cos($PA)
y22=y12-$pupradpix*sin($PA)

x13=cx-spoffpix
y13=cy
x23=x13-$pupradpix*cos($PA)
y23=y13-$pupradpix*sin($PA)


mkline spider0 $size $size x10 y10 x20 y20 spthickpix
mkline spider1 $size $size x11 y11 x21 y21 spthickpix
mkline spider2 $size $size x12 y12 x22 y22 spthickpix
mkline spider3 $size $size x13 y13 x23 y23 spthickpix






# ADD BUMP
ccx=2.853
ccy=0-0.6705
rangle=0-2.247547744
ccxr=ccx*cos(rangle)-ccy*sin(rangle)
ccyr=ccx*sin(rangle)+ccy*cos(rangle)

cx1=cx+ccxr*scale
cy1=cy+ccyr*scale
r1=scale*0.5742*0.5
mkdisk d2 $size $size cx1 cy1 r1

pup00=d0-d1-spider0-spider1-spider2-spider3



pupM=pup00-d2
imtrunc pupM 0 1 pupM1
savefits pupM1 "!tmp_pupMagAOXM_${size}_${pupradpix}.fits"
imtrunc pup00 0 1 pup1
savefits pup1 "!tmp_pupMagAOX_${size}_${pupradpix}.fits"






#loadfits "pup_measured_internal.fits" mpup
#mpup1=0.0-mpup/700000
#resizeim pup1r pup1rr 451 451
#addim pup1rr mpup1 pupadd 73 100
#savefits pup1r "!pup1r.fits"
#savefits pupadd "!pupadd.fits"
exit
EOF



if [ "$COROMASK" = "1" ]; then
	mv tmp_pupMagAOX_${size}_${pupradpix}.fits pupMagAOX_${size}_${pupradpix}.fits
	mv tmp_pupMagAOXm_${size}_${pupradpix}.fits pupMagAOXm_${size}_${pupradpix}.fits
	mv tmp_pupMagAOXM_${size}_${pupradpix}.fits pupMagAOXM_${size}_${pupradpix}.fits
	if [ "$COMPRESS" = "1" ]; then
	gzip pupMagAOX_${size}_${pupradpix}.fits
	gzip pupMagAOXM_${size}_${pupradpix}.fits
	fi
else
	mv tmp_pupMagAOX_${size}_${pupradpix}.fits pupMagAOX_native_${size}_${pupradpix}.fits
	rm tmp_pupMagAOXM_${size}_${pupradpix}.fits
	if [ "$COMPRESS" = "1" ]; then
	gzip pupMagAOX_native_${size}_${pupradpix}.fits
	fi
fi
